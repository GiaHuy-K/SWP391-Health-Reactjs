import React from "react";
import { Form, Input, Button, DatePicker, Select, Modal, Space, message } from "antd";
import { createVaccinationCampaign, updateVaccinationCampaign, CLASS_GROUP_OPTIONS } from "../../services/api.vaccination";
import dayjs from "dayjs";

const { TextArea } = Input;

const VaccinationCampaignCreateForm = ({ open, onClose, onSuccess, isEdit = false, initialValues = {}, onUpdate }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = React.useState(false);

  React.useEffect(() => {
    if (open && isEdit && initialValues) {
      // Chuy·ªÉn ƒë·ªïi ng√†y sang dayjs n·∫øu c√≥
      const values = { ...initialValues };
      if (values.vaccinationDate) values.vaccinationDate = dayjs(values.vaccinationDate);
      if (values.consentDeadline) values.consentDeadline = dayjs(values.consentDeadline);
      form.setFieldsValue(values);
    } else if (open && !isEdit) {
      form.resetFields();
    }
  }, [open, isEdit, initialValues, form]);

  const handleSubmit = async () => {
    try {
      const values = await form.validateFields();
      setLoading(true);
      const payload = {
        campaignName: values.campaignName,
        vaccineName: values.vaccineName,
        vaccinationDate: values.vaccinationDate.format("YYYY-MM-DD"),
        targetClassGroup: values.targetClassGroup,
        ...(values.description ? { description: values.description } : {}),
        ...(values.targetAgeMin !== undefined && values.targetAgeMin !== null && values.targetAgeMin !== "" ? { targetAgeMin: Number(values.targetAgeMin) } : {}),
        ...(values.targetAgeMax !== undefined && values.targetAgeMax !== null && values.targetAgeMax !== "" ? { targetAgeMax: Number(values.targetAgeMax) } : {}),
        ...(values.notes ? { notes: values.notes } : {}),
        ...(values.healthcareProviderName ? { healthcareProviderName: values.healthcareProviderName } : {}),
        ...(values.healthcareProviderContact ? { healthcareProviderContact: values.healthcareProviderContact } : {}),
        ...(values.consentDeadline ? { consentDeadline: values.consentDeadline.format("YYYY-MM-DD") } : {}),
      };
      if (isEdit && initialValues.campaignId) {
        await updateVaccinationCampaign(initialValues.campaignId, payload);
        onUpdate?.();
        onClose();
      } else {
        await createVaccinationCampaign(payload);
        form.resetFields();
        onSuccess?.();
        onClose();
      }
    } catch (error) {
      if (error.errorFields) return;
      message.error(error?.response?.data?.message || (isEdit ? "C·∫≠p nh·∫≠t chi·∫øn d·ªãch th·∫•t b·∫°i" : "T·∫°o chi·∫øn d·ªãch th·∫•t b·∫°i"));
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal
      title={isEdit ? "Ch·ªânh s·ª≠a chi·∫øn d·ªãch ti√™m ch·ªßng" : "T·∫°o chi·∫øn d·ªãch ti√™m ch·ªßng m·ªõi"}
      open={open}
      onCancel={() => { form.resetFields(); onClose(); }}
      onOk={handleSubmit}
      okText={isEdit ? "C·∫≠p nh·∫≠t" : "T·∫°o m·ªõi"}
      cancelText="H·ªßy"
      confirmLoading={loading}
      destroyOnHidden
      width={800}
    >
      <Form form={form} layout="vertical">
        <Form.Item
          label="T√™n chi·∫øn d·ªãch"
          name="campaignName"
          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n chi·∫øn d·ªãch" }]}
        >
          <Input placeholder="Nh·∫≠p t√™n chi·∫øn d·ªãch" />
        </Form.Item>
        <Form.Item
          label="T√™n v·∫Øc-xin"
          name="vaccineName"
          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n v·∫Øc-xin" }]}
        >
          <Input placeholder="Nh·∫≠p t√™n v·∫Øc-xin" />
        </Form.Item>
        <Form.Item
          label="M√¥ t·∫£"
          name="description"
        >
          <TextArea rows={3} placeholder="M√¥ t·∫£ chi·∫øn d·ªãch (kh√¥ng b·∫Øt bu·ªôc)" />
        </Form.Item>
        <Form.Item
          label={
            <span>
              Ng√†y ti√™m ch·ªßng
              <span style={{ fontSize: '12px', color: '#666', fontWeight: 'normal', marginLeft: '8px' }}>
                (Kh√¥ng ƒë∆∞·ª£c trong t∆∞∆°ng lai)
              </span>
            </span>
          }
          name="vaccinationDate"
          rules={[{ required: true, message: "Vui l√≤ng ch·ªçn ng√†y ti√™m ch·ªßng" }]}
          extra={
            <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>
              üìÖ Ch·ªçn ng√†y ti√™m ch·ªßng cho chi·∫øn d·ªãch 
            </div>
          }
        >
          <DatePicker 
            format="DD/MM/YYYY" 
            style={{ width: "100%" }}
            placeholder="Ch·ªçn ng√†y ti√™m ch·ªßng"
            allowClear={false}
            showToday={true}
            inputReadOnly={false}
          />
        </Form.Item>
        <Form.Item
          label="H·∫°n ch√≥t g·ª≠i phi·∫øu ƒë·ªìng √Ω"
          name="consentDeadline"
        >
          <DatePicker format="DD/MM/YYYY" style={{ width: "100%" }} />
        </Form.Item>
        <Form.Item
          label="Kh·ªëi l·ªõp h·ªçc sinh ƒë∆∞·ª£c ti√™m"
          name="targetClassGroup"
          rules={[{ required: true, message: "Vui l√≤ng ch·ªçn kh·ªëi l·ªõp" }]}
        >
          <Select placeholder="Ch·ªçn kh·ªëi l·ªõp">
            {CLASS_GROUP_OPTIONS.map(opt => (
              <Select.Option key={opt.value} value={opt.value}>{opt.label}</Select.Option>
            ))}
          </Select>
        </Form.Item>
        <Form.Item label="ƒê·ªô tu·ªïi t·ªëi thi·ªÉu" name="targetAgeMin">
          <Input type="number" min={0} placeholder="Nh·∫≠p tu·ªïi t·ªëi thi·ªÉu (kh√¥ng b·∫Øt bu·ªôc)" />
        </Form.Item>
        <Form.Item label="ƒê·ªô tu·ªïi t·ªëi ƒëa" name="targetAgeMax">
          <Input type="number" min={0} placeholder="Nh·∫≠p tu·ªïi t·ªëi ƒëa (kh√¥ng b·∫Øt bu·ªôc)" />
        </Form.Item>
        <Form.Item label="Ghi ch√∫" name="notes">
          <TextArea rows={2} placeholder="Ghi ch√∫ b·ªï sung (kh√¥ng b·∫Øt bu·ªôc)" />
        </Form.Item>
        <Form.Item label="ƒê∆°n v·ªã y t·∫ø h·ªó tr·ª£" name="healthcareProviderName">
          <Input placeholder="T√™n ƒë∆°n v·ªã y t·∫ø (kh√¥ng b·∫Øt bu·ªôc)" />
        </Form.Item>
        <Form.Item label="Li√™n h·ªá ƒë∆°n v·ªã y t·∫ø" name="healthcareProviderContact">
          <Input placeholder="S·ªë ƒëi·ªán tho·∫°i, email... (kh√¥ng b·∫Øt bu·ªôc)" />
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default VaccinationCampaignCreateForm; 